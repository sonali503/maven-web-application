def sendSlackNotification(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
pipeline{
    agent any
    parameters {
  choice choices: ['master', 'development', 'qa', 'uat'], description: 'passing branch name', name: 'Branch Name'
}
    options {
  timestamps()
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
}
    triggers {
       githubPush() 
}
        
    
    tools {
  maven 'maven3.8.4'
}

stages{
    stage('BuildStarted'){
	steps{
	sendSlackNotification('STARTED')
	} 
	}
    stage('Checkoutcode'){
        steps{
        git branch: 'development', credentialsId: 'f1295f6a-b318-45da-ae39-1fbfe695a634', url: 'https://github.com/sonali503/maven-web-application.git'    
        }
    }
    stage('MavenBuild'){
        steps{
            sh "mvn clean package"
        }
    }
    stage('ExecuteSonarQubeReportAnduploadArtifactIntoNexus'){
        steps{
            parallel(
            SonarQube:{
                sh "mvn sonar:sonar"
            },
            NexusArtifact:{
                sh "mvn deploy"
            }
            )
        }
        
    }
    stage('DeployIntoAppServer'){
        steps{
            sshagent(['c92741b8-94d6-45ff-8c54-67f3900cdce5']) {
    
            sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@65.2.75.173:/opt/apache-tomcat-9.0.58/webapps"

        }
    }
    }
    
}
post {
       // only triggered when blue or green sign
       success {
          sendSlackNotification(currentBuild.result)
       }
       // triggered when red sign
       failure {
          sendSlackNotification(currentBuild.result)
       }
       // trigger every-works
       always {
          sendSlackNotification(currentBuild.result)
       }
     }
}
